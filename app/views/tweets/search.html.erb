
<div class="col-md-8 col-md-offset-2">
<div id='map'>
<script>
mapboxgl.accessToken = 'pk.eyJ1IjoiZGFuaWVsZWRlcCIsImEiOiJjaW9iN3A3cnEwMDJudXdtMXkxdWkzcmVqIn0.YI8rMksuO-2ndAnGkAv6IA';
var map = new mapboxgl.Map({
    container: 'map', // container id
    style: 'mapbox://styles/danieledep/ciod0wb8r00ekbvnt8lnrml3i', //stylesheet location
    center: [10.63, 44.7], // starting position
    zoom: 15 // starting zoom
});


var features = [];
var col = 0;

<% if @tweets.any? %>
<% @tweets.each do |tweet| %>
		
		if (col<5) col++;
		else col = 1;

		features.push({
			type:'Feature',
			geometry:{
				type:'Point',
				coordinates:[<%=tweet.geo.coordinates[1]%>, <%=tweet.geo.coordinates[0]%>]
			},
			properties:{
				title:"",
				description: '<%=tweet.text %><br><%= image_tag(tweet.media[0]["media_url"], :size => tweet.media[0]["sizes"]["thumb"], class: "img-responsive") if(tweet.media.present?) %>',
				"marker-symbol": "dan"+col
				
				
			}
		});
<% end %>
<% end %>

var sourceObj = new mapboxgl.GeoJSONSource({
   data: {
       "type": "FeatureCollection",
       "features": features
   	}
});

map.on('load', function () {

    map.addSource("markers",sourceObj);

    map.addLayer({
        "id": "markers",
        "type": "symbol",
        "source": "markers",
        "layout": {
            "icon-image": "{marker-symbol}-15",
            
            "text-field": "{title}",
            "text-font": ["Open Sans Semibold", "Arial Unicode MS Bold"],
            "text-offset": [0, 0.6],
            "text-anchor": "top"
        }
    });
});



// When a click event occurs near a marker icon, open a popup at the location of
// the feature, with description HTML from its properties.
map.on('click', function (e) {
    var features = map.queryRenderedFeatures(e.point, { layers: ['markers'] });

    if (!features.length) {
        return;
    }

    var feature = features[0];

    // Populate the popup and set its coordinates
    // based on the feature found.
    var popup = new mapboxgl.Popup()
        .setLngLat(feature.geometry.coordinates)
        .setHTML(feature.properties.description)
        .addTo(map);
});

// Use the same approach as above to indicate that the symbols are clickable
// by changing the cursor style to 'pointer'.
map.on('mousemove', function (e) {
    var features = map.queryRenderedFeatures(e.point, { layers: ['markers'] });
    map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';
});

</script>
</div>
</div>

<% found=0 %>
<% if @tweets.any? %>
	<ul class="col-md-8 col-md-offset-2">
		<% @tweets.each do |tweet| %>
		<p><% dst= Geocoder::Calculations.distance_between( [tweet.geo.coordinates[0],tweet.geo.coordinates[1]], [ params[:lat],params[:lng]],  options = {:units => :km} ) %></p>
		
		<% if dst<=5 %>
		<% found=1 %>
		<li class="tweet">
			 
			<h4>@<%= tweet.user.name %></h4>
			<%
					linked = tweet.text.gsub( %r{https://[^\s<]+} ) do |url|
					    "<a href='#{url}' class='text_link' target = 'blank'>#{url}</a>"
					end
				
				%>
			<p><%= linked.html_safe %></p>
			<p><%= image_tag(tweet.media[0]["media_url"], :size => tweet.media[0]["sizes"]["thumb"], class: "img-responsive") if(tweet.media.present?) %></p>
			
			<p><% br= Geocoder::Calculations.bearing_between( [ params[:lat],params[:lng]], [tweet.geo.coordinates[0],tweet.geo.coordinates[1]]) %></p>
			<p style="color:#696969;">direzione: <%= dst = (dst*1000).round(0) %>  metri <%= br= Geocoder::Calculations.compass_point(br) %></p>
			
			
			

		
			
		</li>
		<% end %>
		<% end %>
    </ul>	
<% else %>
	Mmmh.. pare che non ci siano tweet da @réz-story nelle vicinanze, prova ad andare verso il centro storico.
<% end %>
<% if found==0 %>
	<div class="col-md-8 col-md-offset-2">
	<br>
	Mmmh.. pare che non ci siano tweet da @réz-story nelle vicinanze, prova ad andare verso il centro storico.
	</div>
<% end %>
